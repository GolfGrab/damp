generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator dbml {
  provider              = "prisma-dbml-generator"
  includeRelationFields = false
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id              String   @id
  email           String   @unique
  createdAt       DateTime @default(now())
  createdByUserId String?
  updatedAt       DateTime @updatedAt
  updatedByUserId String?

  createdByUser                 User?                   @relation("createdByUser", fields: [createdByUserId], references: [id], onUpdate: Cascade)
  updatedByUser                 User?                   @relation("updatedByUser", fields: [updatedByUserId], references: [id], onUpdate: Cascade)
  createdUsers                  User[]                  @relation("createdByUser")
  updatedUsers                  User[]                  @relation("updatedByUser")
  accounts                      Account[]
  userPreferences               UserPreference[]
  notificationRecipients        NotificationRecipient[]
  notificationTask              NotificationTask[]
  createdApplications           Application[]           @relation("applicationCreatedUser")
  updatedApplications           Application[]           @relation("applicationUpdatedUser")
  createdTemplates              Template[]              @relation("templateCreatedByUserIdUser")
  updatedTemplates              Template[]              @relation("templateUpdatedByUserIdUser")
  createdNotificationCategories NotificationCategory[]  @relation("notificationCategoryCreatedUser")
  updatedNotificationCategories NotificationCategory[]  @relation("notificationCategoryUpdatedUser")
  deletedNotificationCategories NotificationCategory[]  @relation("notificationCategoryDeletedUser")
  otp                           Otp[]
}

model Account {
  userId       String
  channelType  ChannelType
  channelToken String
  verifiedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id], onUpdate: Cascade)
  channel Channel @relation(fields: [channelType], references: [channelType])
  otp     Otp[]

  @@id([userId, channelType])
}

model Otp {
  id          Int          @id @default(autoincrement())
  otpCode     String
  createdAt   DateTime     @default(now())
  expiredAt   DateTime
  verifiedAt  DateTime?
  userId      String?
  channelType ChannelType?

  user    User?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  channel Channel? @relation(fields: [channelType], references: [channelType], onUpdate: NoAction, onDelete: NoAction)
  account Account? @relation(fields: [userId, channelType], references: [userId, channelType], onDelete: SetNull, onUpdate: SetNull)
}

model Channel {
  channelType ChannelType @id
  messageType MessageType

  accounts          Account[]
  notificationTasks NotificationTask[]
  userPreferences   UserPreference[]
  otp               Otp[]
}

model Application {
  id              String   @id
  name            String
  description     String
  apiKey          String   @unique
  isEnabled       Boolean  @default(true)
  createdAt       DateTime @default(now())
  createdByUserId String
  updatedAt       DateTime @updatedAt
  updatedByUserId String

  createdByUser          User                   @relation(fields: [createdByUserId], references: [id], name: "applicationCreatedUser", onUpdate: Cascade)
  updatedByUser          User                   @relation(fields: [updatedByUserId], references: [id], name: "applicationUpdatedUser", onUpdate: Cascade)
  notificationCategories NotificationCategory[]
  notification           Notification[]
}

model NotificationCategory {
  id              String    @id
  applicationId   String
  name            String    @unique
  createdAt       DateTime  @default(now())
  createdByUserId String
  updatedAt       DateTime  @updatedAt
  updatedByUserId String
  deletedAt       DateTime?
  deletedByUserId String?

  createdUser     User             @relation(fields: [createdByUserId], references: [id], name: "notificationCategoryCreatedUser", onUpdate: Cascade)
  updatedUser     User             @relation(fields: [updatedByUserId], references: [id], name: "notificationCategoryUpdatedUser", onUpdate: Cascade)
  deletedByUser   User?            @relation(fields: [deletedByUserId], references: [id], name: "notificationCategoryDeletedUser", onUpdate: Cascade)
  application     Application      @relation(fields: [applicationId], references: [id])
  userPreferences UserPreference[]
  notifications   Notification[]
}

model Notification {
  id                     Int      @id @default(autoincrement())
  applicationId          String
  notificationCategoryId String
  templateId             String
  templateData           String
  priority               Priority
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  application            Application             @relation(fields: [applicationId], references: [id])
  notificationCategory   NotificationCategory    @relation(fields: [notificationCategoryId], references: [id])
  template               Template                @relation(fields: [templateId], references: [id])
  notificationTasks      NotificationTask[]
  compiledMessages       CompiledMessage[]
  notificationRecipients NotificationRecipient[]
}

model NotificationRecipient {
  notificationId Int
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id])
  user         User         @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@id([notificationId, userId])
}

model CompiledMessage {
  notificationId  Int
  templateId      String
  messageType     MessageType
  compiledMessage String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  notification      Notification       @relation(fields: [notificationId], references: [id])
  compiledTemplate  CompiledTemplate   @relation(fields: [templateId, messageType], references: [templateId, messageType])
  notificationTasks NotificationTask[]

  @@id([notificationId, templateId, messageType])
}

model NotificationTask {
  channelType     ChannelType
  userId          String
  notificationId  Int
  templateId      String
  messageType     MessageType
  priority        Priority
  sentStatus      SentStatus  @default(PENDING)
  sentTimestamp   DateTime?
  failedTimestamp DateTime?
  retryCount      Int         @default(0)
  retryLimit      Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  channel         Channel         @relation(fields: [channelType], references: [channelType])
  user            User            @relation(fields: [userId], references: [id], onUpdate: Cascade)
  notification    Notification    @relation(fields: [notificationId], references: [id])
  template        Template        @relation(fields: [templateId], references: [id])
  compiledMessage CompiledMessage @relation(fields: [notificationId, templateId, messageType], references: [notificationId, templateId, messageType])

  @@id([channelType, userId, notificationId, templateId, messageType])
}

model Template {
  id              String    @id
  name            String
  template        String
  createdAt       DateTime  @default(now())
  createdByUserId String
  updatedAt       DateTime  @updatedAt
  updatedByUserId String
  deletedAt       DateTime?
  deletedByUserId String?

  compiledTemplates   CompiledTemplate[]
  notification        Notification[]
  notificationTask    NotificationTask[]
  createdByUserIdUser User               @relation(fields: [createdByUserId], references: [id], name: "templateCreatedByUserIdUser", onUpdate: Cascade)
  updatedByUserIdUser User               @relation(fields: [updatedByUserId], references: [id], name: "templateUpdatedByUserIdUser", onUpdate: Cascade)
}

model CompiledTemplate {
  templateId       String
  messageType      MessageType
  compiledTemplate String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  template         Template          @relation(fields: [templateId], references: [id])
  compiledMessages CompiledMessage[]

  @@id([templateId, messageType])
}

model UserPreference {
  userId                 String
  notificationCategoryId String
  channelType            ChannelType
  isPreferred            Boolean
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  user                 User                 @relation(fields: [userId], references: [id], onUpdate: Cascade)
  notificationCategory NotificationCategory @relation(fields: [notificationCategoryId], references: [id])
  channel              Channel              @relation(fields: [channelType], references: [channelType])

  @@id([userId, channelType, notificationCategoryId])
}

enum MessageType {
  HTML
  MARKDOWN
  TEXT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum SentStatus {
  PENDING
  RETRY
  SENT
  FAILED
}

enum ChannelType {
  EMAIL
  SMS
  SLACK
}
